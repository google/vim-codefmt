The built-in js-beautify formatter knows how to format javascript, json, html
and css code.
If you aren't familiar with basic codefmt usage yet, see main.vroom first.

We'll set up codefmt and configure the vroom environment, then jump into some
examples.

  :source $VROOMDIR/setupvroom.vim

  :let g:repeat_calls = []
  :function FakeRepeat(...)<CR>
  |  call add(g:repeat_calls, a:000)<CR>
  :endfunction
  :call maktaba#test#Override('repeat#set', 'FakeRepeat')

  :call codefmt#SetWhetherToPerformIsAvailableChecksForTesting(0)


The js-beautify formatter expects the js-beautify executable to be installed
on your system.

  % f()
  :FormatCode js-beautify
  ! js-beautify .*
  $ f()

The name or path of the js-beautify executable can be configured via the
js_beautify_executable flag if the default of "js-beautify" doesn't work.

  :Glaive codefmt js_beautify_executable='myjsb'
  :FormatCode js-beautify
  ! myjsb .*
  $ f()
  :Glaive codefmt js_beautify_executable='js-beautify'


You can format any buffer with js-beautify specifying the formatter explicitly.

  @clear
  %    for (i = 0; i < max; i++) {<CR>
  |a=1234 + 5678 + i; b = 1234*5678+i; c=1234/2+i;}

  :FormatCode js-beautify
  ! js-beautify .*2>.*
  $ for (i = 0; i < max; i++) {
  $   a = 1234 + 5678 + i;
  $   b = 1234 * 5678 + i;
  $   c = 1234 / 2 + i;
  $ }
  for (i = 0; i < max; i++) {
    a = 1234 + 5678 + i;
    b = 1234 * 5678 + i;
    c = 1234 / 2 + i;
  }
  @end

Several filetypes will use the js-beautify formatter by default:
javascript, json, html and css.

Note that javascript will currently be picked up by clang-format;
here we specify js-beautify explicitly.
# @TODO: fix default formatter for javascript

  @clear
  % f();

  :set filetype=javascript
  :FormatCode js-beautify
  ! js-beautify -f - --type js 2>.*
  $ f();

  :set filetype=json
  :FormatCode
  ! js-beautify -f - --type js 2>.*
  $ f();

  :set filetype=html
  :FormatCode
  ! js-beautify -f - --type html 2>.*
  $ f();

  :set filetype=css
  :FormatCode
  ! js-beautify -f - --type css 2>.*
  $ f();

  :set filetype=sass
  :FormatCode js-beautify
  ! js-beautify -f - --type css 2>.*
  $ f();

  :set filetype=scss
  :FormatCode js-beautify
  ! js-beautify -f - --type css 2>.*
  $ f();

  :set filetype=less
  :FormatCode js-beautify
  ! js-beautify -f - --type css 2>.*
  $ f();

  :set filetype=


It can format specific line ranges of code using :FormatLines.

  @clear
  % for (i = 0; i < max; i++) {<CR>
  |a=1234 + 5678 + i; b = 1234*5678+i;<CR>
  |c=1234/2+i;}

  :2,2FormatLines js-beautify
  ! js-beautify .*2>.*
  $ a = 1234 + 5678 + i;
  $ b = 1234 * 5678 + i;
  for (i = 0; i < max; i++) {
  a = 1234 + 5678 + i;
  b = 1234 * 5678 + i;
  c=1234/2+i;}
  @end

NOTE: the js-beautify formatter does not natively support range formatting,
so there are certain limitations like not being able to format misaligned
braces.
